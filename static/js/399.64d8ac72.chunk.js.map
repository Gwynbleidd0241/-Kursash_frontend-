{"version":3,"file":"static/js/399.64d8ac72.chunk.js","mappings":"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","sources":["services/courseService.ts","components/Notification.tsx","services/api.ts","components/CourseCard.tsx","pages/Courses.tsx","utils/helpers.ts"],"sourcesContent":["import apiRequest from './api';\nimport { Course, CoursePayload } from '../types';\n\nconst API_BASE = 'https://681e251bc1c291fa66332e95.mockapi.io/api/lazarus';\n\nexport const fetchCourses = async (): Promise<Course[]> => {\n    return apiRequest<Course[]>('courses');\n};\n\nexport const fetchCourseById = async (id: string): Promise<Course> => {\n    return apiRequest<Course>(`courses/${id}`);\n};\n\nexport const createCourse = async (courseData: CoursePayload): Promise<Course> => {\n    return apiRequest<Course>('courses', 'POST', courseData);\n};\n\nexport const updateCourse = async (id: string, courseData: Partial<Course>): Promise<Course> => {\n    return apiRequest<Course>(`courses/${id}`, 'PUT', courseData);\n};\n\nexport const deleteCourse = async (id: string): Promise<void> => {\n    await apiRequest<void>(`courses/${id}`, 'DELETE');\n};","import { useEffect } from 'react';\n\ninterface NotificationProps {\n    type: 'success' | 'error' | 'info';\n    message: string;\n    onClose?: () => void;\n}\n\nconst Notification = ({ type, message, onClose }: NotificationProps) => {\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if (onClose) onClose();\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [onClose]);\n\n    return (\n        <div className={`notification ${type}`}>\n            <span>{message}</span>\n        </div>\n    );\n};\n\nexport default Notification;","const API_BASE_URL = 'https://681e251bc1c291fa66332e95.mockapi.io/api/lazarus';\n\nconst handleResponse = async <T>(response: Response): Promise<T> => {\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n};\n\nconst apiRequest = async <T>(\n    endpoint: string,\n    method: string = 'GET',\n    data?: unknown\n): Promise<T> => {\n    const url = `${API_BASE_URL}/${endpoint}`;\n    const config: RequestInit = {\n        method,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n\n    if (data) {\n        config.body = JSON.stringify(data);\n    }\n\n    try {\n        const response = await fetch(url, config);\n        return handleResponse<T>(response);\n    } catch (error) {\n        console.error(`API request failed: ${error}`);\n        throw error;\n    }\n};\n\nexport default apiRequest;","import { Link } from 'react-router-dom';\nimport { Course } from '../types';\n\ntype Props = {\n    course: Course;\n    formattedPrice: string;\n    onDelete?: (id: string) => void;\n};\n\nconst CourseCard = ({ course, formattedPrice, onDelete }: Props) => (\n    <div className=\"course-card\">\n        <h3 className=\"course-title\">{course.title}</h3>\n\n        {course.photoUrl && (\n            <div className=\"course-image-wrapper\">\n                <img src={course.photoUrl} alt={course.title} className=\"course-image\" />\n            </div>\n        )}\n\n        <div className=\"course-info\">\n            <span className=\"price\">{formattedPrice}</span>\n            <span className=\"level\">{course.level}</span>\n        </div>\n\n        <div className=\"actions\">\n            <Link to={`/courses/${course.id}`} className=\"details-link\">\n                Подробнее\n            </Link>\n            {onDelete && (\n                <button className=\"delete-btn\" onClick={() => onDelete(course.id)}>\n                    Удалить\n                </button>\n            )}\n        </div>\n    </div>\n);\n\nexport default CourseCard;\n","import { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { fetchCourses, deleteCourse } from '../services/courseService';\nimport { Course } from '../types';\nimport Loader from '../components/Loader';\nimport CourseCard from '../components/CourseCard';\nimport Notification from '../components/Notification';\nimport { formatPrice, handleApiError } from '../utils/helpers';\n\nconst Courses = () => {\n    const [courses, setCourses] = useState<Course[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        const loadCourses = async () => {\n            try {\n                const data = await fetchCourses();\n                setCourses(data);\n            } catch (err) {\n                setError(handleApiError(err));\n            } finally {\n                setLoading(false);\n            }\n        };\n        loadCourses();\n    }, []);\n\n    const handleDelete = async (id: string) => {\n        try {\n            await deleteCourse(id);\n            setCourses(courses.filter(course => course.id !== id));\n        } catch (error) {\n            setError(handleApiError(error));\n        }\n    };\n\n    if (loading) return <Loader />;\n\n    return (\n        <div className=\"courses-page\">\n            <div className=\"page-header\">\n                <h1>Управление курсами</h1>\n                <div className=\"actions-group\">\n                    <Link to=\"/courses/new\" className=\"btn primary\">\n                        + Новый курс\n                    </Link>\n                    <Link to=\"/\" className=\"btn secondary\">\n                        ← Назад\n                    </Link>\n                </div>\n            </div>\n\n            {error && (\n                <Notification\n                    type=\"error\"\n                    message={error}\n                    onClose={() => setError('')}\n                />\n            )}\n\n            <div className=\"courses-grid\">\n                {courses.map((course) => (\n                    <CourseCard\n                        key={course.id}\n                        course={course}\n                        formattedPrice={formatPrice(course.price)}\n                        onDelete={() => handleDelete(course.id)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Courses;\n","export const formatPrice = (price: number): string => {\n    return `${Math.round(price)} 000 ₽`;\n};\n\nexport const capitalize = (str: string): string => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const handleApiError = (error: unknown): string => {\n    console.error(error);\n    return error instanceof Error\n        ? error.message\n        : 'Произошла неизвестная ошибка';\n};"],"names":["fetchCourses","async","apiRequest","fetchCourseById","concat","id","createCourse","courseData","updateCourse","deleteCourse","_ref","type","message","onClose","useEffect","timer","setTimeout","clearTimeout","_jsx","className","children","endpoint","method","arguments","length","undefined","data","url","config","headers","body","JSON","stringify","response","ok","Error","status","json","handleResponse","fetch","error","console","course","formattedPrice","onDelete","_jsxs","title","photoUrl","src","alt","level","Link","to","onClick","Courses","courses","setCourses","useState","loading","setLoading","setError","err","handleApiError","loadCourses","Loader","Notification","map","CourseCard","formatPrice","price","filter","handleDelete","Math","round"],"sourceRoot":""}